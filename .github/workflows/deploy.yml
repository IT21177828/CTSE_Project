name: 🚀 Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      build_all:
        description: 'Build all services regardless of changes'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Required for HEAD^ to exist

      - name: 🔐 Authenticate to ACR
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login "${{ secrets.ACR_LOGIN_SERVER }}" \
            --username "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: 🔧 Detect Changed Services
        id: detect_changes
        run: |
          changed=""
          if [[ "${{ github.event.inputs.build_all }}" == "true" ]]; then
            echo "✅ build_all is true. Will build all services."
            echo "changed_services=*" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          for dir in backend/services/*; do
            service=$(basename "$dir")
            if ! git diff --quiet HEAD^ HEAD -- "$dir"; then
              echo "✅ Changes detected in $service"
              changed+="$service "
            else
              echo "❌ No changes in $service"
            fi
          done

          echo "changed_services=${changed}" >> "$GITHUB_OUTPUT"

      - name: ☕ Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🔨 Build Maven Projects (Changed or All)
        run: |
          changed="${{ steps.detect_changes.outputs.changed_services }}"
          echo "📦 Services to build: $changed"

          for dir in backend/services/*; do
            service=$(basename "$dir")
            if [[ "$changed" == "*" ]] || [[ "$changed" == *"$service"* ]]; then
              echo "🔧 Building Maven project: $service"
              mvn -B clean package -DskipTests -f "$dir/pom.xml"
            fi
          done

      - name: 🧪 Snyk Scan (Maven - Order Service)
        run: |
          npm install -g snyk
          snyk test --file=backend/services/order-service/pom.xml --project-name=order-service
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


      - name: 🛠️ Build & Push Changed Docker Images
        run: |
          changed="${{ steps.detect_changes.outputs.changed_services }}"
          echo "🐳 Services to build Docker images for: $changed"

          for dir in backend/services/*; do
            service=$(basename "$dir")
            if [[ "$changed" == "*" ]] || [[ "$changed" == *"$service"* ]]; then
              echo "✨ Building and pushing Docker image for $service"
              docker build -t "${{ secrets.ACR_LOGIN_SERVER }}/$service:latest" "$dir"
              docker push "${{ secrets.ACR_LOGIN_SERVER }}/$service:latest"
            fi
          done

      - name: ⚙️ Set up kubectl CLI
        uses: azure/setup-kubectl@v3

      - name: 🔧 Configure Kubeconfig for AKS
        run: |
          echo "$KUBECONFIG_DATA" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config get-contexts
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}

      - name: 🚢 Deploy Kubernetes Manifests
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl apply -f backend/k8s/manifests/infrastucture
          kubectl apply -f backend/k8s/manifests/applications/
